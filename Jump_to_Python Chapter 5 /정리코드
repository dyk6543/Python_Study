#5장 jump_to_python 정리
result = 0


def add(num):
  global result
  result = result + num
  return result


#class calculator:

#def __init__(self):
#self.result = 0

#def add(self,num):
#self.result += num
#return self.result

#calc = calculator()
#print(calc.add(3))
#print(calc.add(4))


class FourCal:

  def __init__(self, first, second):
    self.first = first
    self.second = second

  #def setdata(self, first, second):
  #self.first = first
  #self.second = second

  def add(self):
    result = self.first + self.second
    return result

  def mul(self):
    result = self.first * self.second
    return result

  def div(self):
    result = self.first / self.second
    return result


#class 상속
class MoreFourCal(FourCal):

  def pow(self):
    result = self.first**self.second
    return result


a = MoreFourCal(4, 0)

#print(a.pow())
#print(a.div())


#class 오버라이딩
#4를 0으로 나눌 때, 오류가 아닌 값 0을 리턴받고 싶을 때
class SafeFourCal(FourCal):

  def div(self):
    if self.second == 0:
      return 0
    else:
      result = self.first / self.second
      return result


#b=SafeFourCal(4,0)
#print(b.div())

#import main
#print(main.add(3))

#해당 모듈의 함수 가져오려는 경우
#from 모듈_이름 import 모듈_함수
#from main import add
#add(4)

#많은 함수 가져오려는 경우
#from main import 가져오려는 함수

#모듈 내 모든 함수 가져오려는 경우
#from main import *


def add(a, b):
  return a + b


def sub(a, b):
  return a - b


#if __name__ == "__main__":
#print(add(1,4))
#print(sub(4,2))

#import main

#예외처리
#try : 4/0
#except ZeroDivisionError as e:
#print(e)

#try : 4/0
#finally : print(5/2)
#print(add(1,2))

#try :
#age = int(input('나이를 입력하세요:'))
#except :
#print('입력 부정확')
#else : #오류가 없는 경우
#if age <= 19:
#print('미성년자')
#else : print('가능')

#class Calculator:
#def __init__(self):
#self.value = 0

#def add(self,val):
#self.value += val
#return self.value

#class UpgradeCalculator(Calculator):
#def minus(self,val):
#self.value -= val
#return self.value

#cal = UpgradeCalculator()
#print(cal.add(10))
#print(cal.minus(7))


class Calculator:

  def __init__(self):
    self.value = 0

  def add(self, val):
    self.value += val


class MaxLimitCalculator(Calculator):

  def add(self, val):
    if self.value + val > 100:
      print('100이상은 100으로 출력')
    else:
      self.value += val
      return self.value


cal = MaxLimitCalculator()
#print(cal.add(50))
#print(cal.add(60))

print(all([1, 2, abs(-3) - 3]))  #false
print(chr(ord('a')) == 'a')  #true

#filter, lambda 사용, [1,-2,3,-5,8,-3]에서 음수 제거 결과 : [1,3,8] 이 나와야함
a = list(filter(lambda x: x > 0, [1, -2, 3, -5, 8, -3]))
print(a)

print(int(hex(234), 16))

#map, lambda 사용 [1,2,3,4] 에서 [3,6,9,12] 만들기
print(list(map(lambda x: x * 3, [1, 2, 3, 4])))

#최대, 최소 합
b= [-8,2,7,5,-3,5,0,1]
print(max(b)+min(b))

# 소숫점 반올림
a = 17/3
print(round(a,4))

# 표준 라이브러리 datetime.date 객체
import datetime
day1 = datetime.date(2021,12,14)
day2 = datetime.date(2023,4,5)

diff = day2 - day1
print(diff.days)  # 두날짜의 차이

print(day1.weekday())  #무슨요일인지 확인 0: 월요일, 1: 화요일, ~
print(day1.isoweekday())  # 1: 월요일, 2: 화요일, ~

# 표준 라이브러리 내 time 모듈
import time
print(time.time())  # 현재 시간 실수 형태로 리턴
print(time.localtime())  # 현재 시간 정보 반환
print(time.asctime(time.localtime())) #튜플형태의 값 인수로 받아 알아보기 쉬운 형태로 반환
print(time.ctime()) #asctime과 같으나, 항상 현재 시간만을 리턴함
print(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))  # 현재 시간 정보 반환
print(time.strftime("%Y/%M/%D %H:%M:%S", time.localtime()))
for i in range(10):
  print(i)
  #time.sleep(1) #1초 간격으로 0부터 9까지 출력

# 수학 공식 사용 모듈
import math
print(math.gcd(60,100,80)) #최대공약수 
print(math.lcm(15,25)) #최소공배수

# 난수 발생 모듈
import random
print(random.random()) #0~1 사이의 수 발생
print(random.randint(1,10)) #1~10 사이의 수 발생
print(random.randrange(1,10)) #1~10 사이의 수 발생
print(random.choice(['a','b','c'])) # 리스트 중 하나 선택
# random.shuffle(['a','b','c']) #무작위로 섞는다
print(random.sample(range(1,46),6))
print(random.sample(range(1,10),3)) # 리스트 중 3개 선택

#itertools.zip_longest
import itertools
a = [1, 2, 3, 4, 5]
b = ['a', 'b', 'c', 'd', 'e']
c = ['x', 'y', 'z']
print(list(itertools.zip_longest(a, b, c, fillvalue='-'))) #요소개수가 많은것을 기준으로 묶으며, 부족한 항목은 none으로 채움

students=['a','b','c','d','e']
snacks=['apple','banana','pineapple']
print(list(zip(students, snacks)))
print(list(itertools.zip_longest(students, snacks, fillvalue = '없음')))

#itertools.permutation : 반복 가능 객체 중에서 r개 선택 순열을 이터레이터로 리턴
import itertools
print(list(itertools.permutations(['1','2','3'],2)))
for a, b in list(itertools.permutations(['1','2','3'],2)):
  print (a+b)
import itertools
result = list(itertools.permutations('abcd',4))
for r in result:
  print(''.join(r))
  
#순서 상관 없는 경우
import itertools
print(list(itertools.combinations(['1','2','3'],2)))

#functools.reduce(function, iterable) : 함수를 반복가능한객체에 누적적용하여 하나의 값으로 줄임
#기존 list 내 원소들 합 구하는 함수 만들 땐
def add(data):
  result = 0
  for i in data:
    result += i
  return result

data = [1,2,3,4,5]
print(add(data))

import functools

data = [1,2,3,4,5]
print(functools.reduce(lambda x,y : x+y, data)) #lambda 해석하면 ((((1+2)+3)+4)+5) 를 순차적으로 진행함
print(functools.reduce(lambda x,y : x if x>y else y, data))

#operator.itemgetter : 다양한 기준으로 정렬하도록 도와주는 모듈
import operator
data = [('jane',22,'a'),('dave',32, 'b'),('sally',17, 'b')]
print(sorted(data, key=operator.itemgetter(1))) #튜플의 두번째 원소 기준으로 정렬
print(sorted(data, key=operator.itemgetter(1), reverse=True)) #key 값으로 정 역순

#dictionary 에서 itemgetter예시
from operator import itemgetter
data = [{'name':'jane','age':22,'grade':'a'},{'name':'dave','age':32,'grade' : 'b'},{'name':'sally','age':17,'grade':'b'}]
print(sorted(data, key = itemgetter('age') ))

#shutil : 자동백업
import shutil

#shutil.copy('c:/doit/a.txt', 'c:/doit/a.txt.bak') txt에 대한 백업 파일을 구현
garo = 200
sero = 80
import math
a = math.gcd(garo,sero)
print(a)
print(garo/a * sero/a)

#import glob

#glob.glob('c:/doit/mark*') : mark로 시작하는 모든 파일 찾아서 읽어들임
